<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('mdIpLocatorPHPWrapper')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_mdIpLocatorPHPWrapper.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('mdIpLocatorPHPWrapper.so')) return;
    } else {
      if (!dl('mdIpLocatorPHPWrapper.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class mdIpLocator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_mdIpLocatorPHPWrapper_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_mdIpLocatorPHPWrapper_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const ErrorNone = 0;

	const ErrorOther = mdIpLocator_ErrorOther;

	const ErrorOutOfMemory = mdIpLocator_ErrorOutOfMemory;

	const ErrorRequiredFileNotFound = mdIpLocator_ErrorRequiredFileNotFound;

	const ErrorFoundOldFile = mdIpLocator_ErrorFoundOldFile;

	const ErrorDatabaseExpired = mdIpLocator_ErrorDatabaseExpired;

	const ErrorLicenseExpired = mdIpLocator_ErrorLicenseExpired;

	const Local = 0;

	const Remote = mdIpLocator_Remote;

	const Auto = 0;

	const On = mdIpLocator_On;

	const Off = mdIpLocator_Off;

	const FCM_LTR_AUTO_NONAUTO = 1;

	const FCM_LTR_AUTO = mdIpLocator_FCM_LTR_AUTO;

	const FCM_LTR_NONAUTO = mdIpLocator_FCM_LTR_NONAUTO;

	const FCM_LTR_NONMACH = mdIpLocator_FCM_LTR_NONMACH;

	const FCM_POSTCARD_AUTO_NONAUTO = 41;

	const FCM_POSTCARD_AUTO = mdIpLocator_FCM_POSTCARD_AUTO;

	const FCM_POSTCARD_NONAUTO = mdIpLocator_FCM_POSTCARD_NONAUTO;

	const FCM_FLAT_COTRAY = 51;

	const FCM_FLAT_AUTO = mdIpLocator_FCM_FLAT_AUTO;

	const FCM_FLAT_NONAUTO = mdIpLocator_FCM_FLAT_NONAUTO;

	const FCM_FLAT_DISABLE_COTRAY = mdIpLocator_FCM_FLAT_DISABLE_COTRAY;

	const FCM_FLAT_COTRAY_FSM1000 = mdIpLocator_FCM_FLAT_COTRAY_FSM1000;

	const FCM_FLAT_DISABLE_COTRAY_FSM1000 = mdIpLocator_FCM_FLAT_DISABLE_COTRAY_FSM1000;

	const FCM_FLAT_AUTO_FSM1000 = mdIpLocator_FCM_FLAT_AUTO_FSM1000;

	const FCM_FLAT_NONAUTO_FSM1000 = mdIpLocator_FCM_FLAT_NONAUTO_FSM1000;

	const STD_LTR_ECRRT_AUTO_NONAUTO = 101;

	const STD_LTR_ECRRT_NONAUTO = mdIpLocator_STD_LTR_ECRRT_NONAUTO;

	const STD_LTR_AUTO_NONAUTO = mdIpLocator_STD_LTR_AUTO_NONAUTO;

	const STD_LTR_AUTO = mdIpLocator_STD_LTR_AUTO;

	const STD_LTR_NONAUTO = mdIpLocator_STD_LTR_NONAUTO;

	const STD_LTR_NONMACH = mdIpLocator_STD_LTR_NONMACH;

	const STD_LTR_ECRRT_NONMACH = mdIpLocator_STD_LTR_ECRRT_NONMACH;

	const STD_FLAT_ECRRT_COSACK = 151;

	const STD_FLAT_ECRRT_DISABLE_COSACK = mdIpLocator_STD_FLAT_ECRRT_DISABLE_COSACK;

	const STD_FLAT_COSACK = mdIpLocator_STD_FLAT_COSACK;

	const STD_FLAT_DISABLE_COSACK = mdIpLocator_STD_FLAT_DISABLE_COSACK;

	const STD_FLAT_AUTO = mdIpLocator_STD_FLAT_AUTO;

	const STD_FLAT_NONAUTO = mdIpLocator_STD_FLAT_NONAUTO;

	const STD_FLAT_ECRRT_AUTO = mdIpLocator_STD_FLAT_ECRRT_AUTO;

	const STD_FLAT_ECRRT_NONAUTO = mdIpLocator_STD_FLAT_ECRRT_NONAUTO;

	const RESIDUALS_LEFT = 999;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_mdIpLocator') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_mdIpLocator();
	}

	function InitializeDataFiles() {
		return mdIpLocator_InitializeDataFiles($this->_cPtr);
	}

	function SetPathToIpLocatorFiles($arg1) {
		mdIpLocator_SetPathToIpLocatorFiles($this->_cPtr,$arg1);
	}

	function GetInitializeErrorString() {
		return mdIpLocator_GetInitializeErrorString($this->_cPtr);
	}

	function SetLicenseString($arg1) {
		return mdIpLocator_SetLicenseString($this->_cPtr,$arg1);
	}

	function GetBuildNumber() {
		return mdIpLocator_GetBuildNumber($this->_cPtr);
	}

	function GetDatabaseDate() {
		return mdIpLocator_GetDatabaseDate($this->_cPtr);
	}

	function GetDatabaseExpirationDate() {
		return mdIpLocator_GetDatabaseExpirationDate($this->_cPtr);
	}

	function GetLicenseStringExpirationDate() {
		return mdIpLocator_GetLicenseStringExpirationDate($this->_cPtr);
	}

	function LocateIpAddress($arg1) {
		return mdIpLocator_LocateIpAddress($this->_cPtr,$arg1);
	}

	function GetCity() {
		return mdIpLocator_GetCity($this->_cPtr);
	}

	function GetCountry() {
		return mdIpLocator_GetCountry($this->_cPtr);
	}

	function GetCountryAbbreviation() {
		return mdIpLocator_GetCountryAbbreviation($this->_cPtr);
	}

	function GetDomainName() {
		return mdIpLocator_GetDomainName($this->_cPtr);
	}

	function GetISP() {
		return mdIpLocator_GetISP($this->_cPtr);
	}

	function GetLongitude() {
		return mdIpLocator_GetLongitude($this->_cPtr);
	}

	function GetLatitude() {
		return mdIpLocator_GetLatitude($this->_cPtr);
	}

	function GetRegion() {
		return mdIpLocator_GetRegion($this->_cPtr);
	}

	function GetZip() {
		return mdIpLocator_GetZip($this->_cPtr);
	}

	function GetResults() {
		return mdIpLocator_GetResults($this->_cPtr);
	}
}


?>
