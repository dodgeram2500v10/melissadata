# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mdIpLocatorPythonWrapper', [dirname(__file__)])
        except ImportError:
            import _mdIpLocatorPythonWrapper
            return _mdIpLocatorPythonWrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_mdIpLocatorPythonWrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mdIpLocatorPythonWrapper = swig_import_helper()
    del swig_import_helper
else:
    import _mdIpLocatorPythonWrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class mdIpLocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mdIpLocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mdIpLocator, name)
    __repr__ = _swig_repr
    ErrorNone = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorNone
    ErrorOther = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorOther
    ErrorOutOfMemory = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorOutOfMemory
    ErrorRequiredFileNotFound = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorRequiredFileNotFound
    ErrorFoundOldFile = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorFoundOldFile
    ErrorDatabaseExpired = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorDatabaseExpired
    ErrorLicenseExpired = _mdIpLocatorPythonWrapper.mdIpLocator_ErrorLicenseExpired
    Local = _mdIpLocatorPythonWrapper.mdIpLocator_Local
    Remote = _mdIpLocatorPythonWrapper.mdIpLocator_Remote
    Auto = _mdIpLocatorPythonWrapper.mdIpLocator_Auto
    On = _mdIpLocatorPythonWrapper.mdIpLocator_On
    Off = _mdIpLocatorPythonWrapper.mdIpLocator_Off
    FCM_LTR_AUTO_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_LTR_AUTO_NONAUTO
    FCM_LTR_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_LTR_AUTO
    FCM_LTR_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_LTR_NONAUTO
    FCM_LTR_NONMACH = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_LTR_NONMACH
    FCM_POSTCARD_AUTO_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_POSTCARD_AUTO_NONAUTO
    FCM_POSTCARD_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_POSTCARD_AUTO
    FCM_POSTCARD_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_POSTCARD_NONAUTO
    FCM_FLAT_COTRAY = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_COTRAY
    FCM_FLAT_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_AUTO
    FCM_FLAT_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_NONAUTO
    FCM_FLAT_DISABLE_COTRAY = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_DISABLE_COTRAY
    FCM_FLAT_COTRAY_FSM1000 = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_COTRAY_FSM1000
    FCM_FLAT_DISABLE_COTRAY_FSM1000 = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_DISABLE_COTRAY_FSM1000
    FCM_FLAT_AUTO_FSM1000 = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_AUTO_FSM1000
    FCM_FLAT_NONAUTO_FSM1000 = _mdIpLocatorPythonWrapper.mdIpLocator_FCM_FLAT_NONAUTO_FSM1000
    STD_LTR_ECRRT_AUTO_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_ECRRT_AUTO_NONAUTO
    STD_LTR_ECRRT_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_ECRRT_NONAUTO
    STD_LTR_AUTO_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_AUTO_NONAUTO
    STD_LTR_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_AUTO
    STD_LTR_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_NONAUTO
    STD_LTR_NONMACH = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_NONMACH
    STD_LTR_ECRRT_NONMACH = _mdIpLocatorPythonWrapper.mdIpLocator_STD_LTR_ECRRT_NONMACH
    STD_FLAT_ECRRT_COSACK = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_ECRRT_COSACK
    STD_FLAT_ECRRT_DISABLE_COSACK = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_ECRRT_DISABLE_COSACK
    STD_FLAT_COSACK = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_COSACK
    STD_FLAT_DISABLE_COSACK = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_DISABLE_COSACK
    STD_FLAT_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_AUTO
    STD_FLAT_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_NONAUTO
    STD_FLAT_ECRRT_AUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_ECRRT_AUTO
    STD_FLAT_ECRRT_NONAUTO = _mdIpLocatorPythonWrapper.mdIpLocator_STD_FLAT_ECRRT_NONAUTO
    RESIDUALS_LEFT = _mdIpLocatorPythonWrapper.mdIpLocator_RESIDUALS_LEFT
    def __init__(self): 
        this = _mdIpLocatorPythonWrapper.new_mdIpLocator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mdIpLocatorPythonWrapper.delete_mdIpLocator
    __del__ = lambda self : None;
    def InitializeDataFiles(self): return _mdIpLocatorPythonWrapper.mdIpLocator_InitializeDataFiles(self)
    def SetPathToIpLocatorFiles(self, *args): return _mdIpLocatorPythonWrapper.mdIpLocator_SetPathToIpLocatorFiles(self, *args)
    def GetInitializeErrorString(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetInitializeErrorString(self)
    def SetLicenseString(self, *args): return _mdIpLocatorPythonWrapper.mdIpLocator_SetLicenseString(self, *args)
    def GetBuildNumber(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetBuildNumber(self)
    def GetDatabaseDate(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetDatabaseDate(self)
    def GetDatabaseExpirationDate(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetDatabaseExpirationDate(self)
    def GetLicenseStringExpirationDate(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetLicenseStringExpirationDate(self)
    def LocateIpAddress(self, *args): return _mdIpLocatorPythonWrapper.mdIpLocator_LocateIpAddress(self, *args)
    def GetCity(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetCity(self)
    def GetCountry(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetCountry(self)
    def GetCountryAbbreviation(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetCountryAbbreviation(self)
    def GetDomainName(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetDomainName(self)
    def GetISP(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetISP(self)
    def GetLongitude(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetLongitude(self)
    def GetLatitude(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetLatitude(self)
    def GetRegion(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetRegion(self)
    def GetZip(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetZip(self)
    def GetResults(self): return _mdIpLocatorPythonWrapper.mdIpLocator_GetResults(self)
mdIpLocator_swigregister = _mdIpLocatorPythonWrapper.mdIpLocator_swigregister
mdIpLocator_swigregister(mdIpLocator)



