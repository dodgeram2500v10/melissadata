# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package mdIpLocatorPerlWrapper;
use base qw(Exporter);
use base qw(DynaLoader);
package mdIpLocatorPerlWrapperc;
bootstrap mdIpLocatorPerlWrapper;
package mdIpLocatorPerlWrapper;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package mdIpLocatorPerlWrapper;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package mdIpLocatorPerlWrapper;


############# Class : mdIpLocatorPerlWrapper::mdIpLocator ##############

package mdIpLocatorPerlWrapper::mdIpLocator;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( mdIpLocatorPerlWrapper );
%OWNER = ();
%ITERATORS = ();
*ErrorNone = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorNone;
*ErrorOther = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorOther;
*ErrorOutOfMemory = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorOutOfMemory;
*ErrorRequiredFileNotFound = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorRequiredFileNotFound;
*ErrorFoundOldFile = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorFoundOldFile;
*ErrorDatabaseExpired = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorDatabaseExpired;
*ErrorLicenseExpired = *mdIpLocatorPerlWrapperc::mdIpLocator_ErrorLicenseExpired;
*Local = *mdIpLocatorPerlWrapperc::mdIpLocator_Local;
*Remote = *mdIpLocatorPerlWrapperc::mdIpLocator_Remote;
*Auto = *mdIpLocatorPerlWrapperc::mdIpLocator_Auto;
*On = *mdIpLocatorPerlWrapperc::mdIpLocator_On;
*Off = *mdIpLocatorPerlWrapperc::mdIpLocator_Off;
*FCM_LTR_AUTO_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_LTR_AUTO_NONAUTO;
*FCM_LTR_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_LTR_AUTO;
*FCM_LTR_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_LTR_NONAUTO;
*FCM_LTR_NONMACH = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_LTR_NONMACH;
*FCM_POSTCARD_AUTO_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_POSTCARD_AUTO_NONAUTO;
*FCM_POSTCARD_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_POSTCARD_AUTO;
*FCM_POSTCARD_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_POSTCARD_NONAUTO;
*FCM_FLAT_COTRAY = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_COTRAY;
*FCM_FLAT_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_AUTO;
*FCM_FLAT_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_NONAUTO;
*FCM_FLAT_DISABLE_COTRAY = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_DISABLE_COTRAY;
*FCM_FLAT_COTRAY_FSM1000 = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_COTRAY_FSM1000;
*FCM_FLAT_DISABLE_COTRAY_FSM1000 = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_DISABLE_COTRAY_FSM1000;
*FCM_FLAT_AUTO_FSM1000 = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_AUTO_FSM1000;
*FCM_FLAT_NONAUTO_FSM1000 = *mdIpLocatorPerlWrapperc::mdIpLocator_FCM_FLAT_NONAUTO_FSM1000;
*STD_LTR_ECRRT_AUTO_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_ECRRT_AUTO_NONAUTO;
*STD_LTR_ECRRT_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_ECRRT_NONAUTO;
*STD_LTR_AUTO_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_AUTO_NONAUTO;
*STD_LTR_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_AUTO;
*STD_LTR_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_NONAUTO;
*STD_LTR_NONMACH = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_NONMACH;
*STD_LTR_ECRRT_NONMACH = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_LTR_ECRRT_NONMACH;
*STD_FLAT_ECRRT_COSACK = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_ECRRT_COSACK;
*STD_FLAT_ECRRT_DISABLE_COSACK = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_ECRRT_DISABLE_COSACK;
*STD_FLAT_COSACK = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_COSACK;
*STD_FLAT_DISABLE_COSACK = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_DISABLE_COSACK;
*STD_FLAT_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_AUTO;
*STD_FLAT_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_NONAUTO;
*STD_FLAT_ECRRT_AUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_ECRRT_AUTO;
*STD_FLAT_ECRRT_NONAUTO = *mdIpLocatorPerlWrapperc::mdIpLocator_STD_FLAT_ECRRT_NONAUTO;
*RESIDUALS_LEFT = *mdIpLocatorPerlWrapperc::mdIpLocator_RESIDUALS_LEFT;
sub new {
    my $pkg = shift;
    my $self = mdIpLocatorPerlWrapperc::new_mdIpLocator(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        mdIpLocatorPerlWrapperc::delete_mdIpLocator($self);
        delete $OWNER{$self};
    }
}

*InitializeDataFiles = *mdIpLocatorPerlWrapperc::mdIpLocator_InitializeDataFiles;
*SetPathToIpLocatorFiles = *mdIpLocatorPerlWrapperc::mdIpLocator_SetPathToIpLocatorFiles;
*GetInitializeErrorString = *mdIpLocatorPerlWrapperc::mdIpLocator_GetInitializeErrorString;
*SetLicenseString = *mdIpLocatorPerlWrapperc::mdIpLocator_SetLicenseString;
*GetBuildNumber = *mdIpLocatorPerlWrapperc::mdIpLocator_GetBuildNumber;
*GetDatabaseDate = *mdIpLocatorPerlWrapperc::mdIpLocator_GetDatabaseDate;
*GetDatabaseExpirationDate = *mdIpLocatorPerlWrapperc::mdIpLocator_GetDatabaseExpirationDate;
*GetLicenseStringExpirationDate = *mdIpLocatorPerlWrapperc::mdIpLocator_GetLicenseStringExpirationDate;
*LocateIpAddress = *mdIpLocatorPerlWrapperc::mdIpLocator_LocateIpAddress;
*GetCity = *mdIpLocatorPerlWrapperc::mdIpLocator_GetCity;
*GetCountry = *mdIpLocatorPerlWrapperc::mdIpLocator_GetCountry;
*GetCountryAbbreviation = *mdIpLocatorPerlWrapperc::mdIpLocator_GetCountryAbbreviation;
*GetDomainName = *mdIpLocatorPerlWrapperc::mdIpLocator_GetDomainName;
*GetISP = *mdIpLocatorPerlWrapperc::mdIpLocator_GetISP;
*GetLongitude = *mdIpLocatorPerlWrapperc::mdIpLocator_GetLongitude;
*GetLatitude = *mdIpLocatorPerlWrapperc::mdIpLocator_GetLatitude;
*GetRegion = *mdIpLocatorPerlWrapperc::mdIpLocator_GetRegion;
*GetZip = *mdIpLocatorPerlWrapperc::mdIpLocator_GetZip;
*GetResults = *mdIpLocatorPerlWrapperc::mdIpLocator_GetResults;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package mdIpLocatorPerlWrapper;

1;
